#!/usr/bin/ruby

require 'json'
require 'find'
require 'shellwords'
require 'noms'

class MusicBackup
  attr_reader :basedir, :music_extensions, :taglist, :db

  MUSIC_EXTENSIONS = %w{mp3 m4a aif}
  HASHES = []
  
  def store_hash(name, value)
    HASHES << value
  end

  def initialize(dir)
    #@basedir = File.expand_path("~/Music/iTunes/iTunes Media/Music/Uncle Tupelo/Anodyne")
    #@basedir = File.expand_path("~/Music/iTunes/iTunes Media/Music/")
    #
    
    fail "No dir #{dir.inspect}" unless FileTest.directory?(dir)
    @basedir = dir
    @music_extensions = %w{mp3 m4a aif}

    # We'll use this to keep track of what attributes to add to each file
    # And we'll also count the recurrence of each of them, just for fun
    @taglist = Hash.new { |hash, key| hash[key] = 0 }

    @db = Noms::Database.new("mp3db", :directory => "/tmp/mp3nomstesting")
  end

  def music_files
    skipped = Hash.new { |hash, key| hash[key] = 0 }

    Find.find(basedir) do |path|
      next unless FileTest.file?(path)
      extension = path.split(".").pop
      unless MUSIC_EXTENSIONS.include?(extension)
        skipped[extension] += 1
      end

      yield path
    end
  end

  def store_blob(json)
    hash = db.run("blob", "put", json["SourceFile"], db.db)
    store_hash("blob", hash)
    json["BinaryFile"] = hash
  end

  def store_file(json)
    # Make sure we have all of the keys
    struct_args = []
    json.each do |key, value|
      if value == ''
        json.delete(key)
      else
        # XXX This won't work in the long term, because it's not isomorphic.
        # We need to record this shift, and the undo it when moving in the other direction.
        # But as a proof of concept it's ok.
        #   This is necessary because '-' is invalid in field names.
        struct_args << key.gsub("-", "_")
        struct_args << value.to_s
      end
      taglist[key] += 1
    end

    print "."

    store_blob(json)

    args = ["struct", "new", "--name", "Song", db.db] + struct_args
    hash = db.run(*args)
    db.add_to_set(hash)
    store_hash("Struct", hash)
  end
end

# We're going to chunk the files to ten at a time
files = []

all_files = []

unless dir = ARGV[0]
  fail "Must provide directory of MP3s to store"
end
backup = MusicBackup.new(dir)


backup.music_files do |file|
  if files.length < 10
    files << file
  else
    escaped_text = files.collect { |f| Shellwords.escape(f) }.join(" ")
    # The -b gets the cover image
    text = %x{exiftool -json #{escaped_text} 2>/dev/null}
    json = JSON.parse(text) # It always returns an array

    # This is useful for debugging
    #all_files += json
    json.each do |file|
      backup.store_file(file)
    end

    files.clear
  end
end

print "\n"
hash = backup.db.commit
print "\n"

#p MusicBackup::HASHES

#p backup.taglist

#db = Noms::Database.new("mp3", :dir => "/tmp/noms_mp3_test")



# noms blob put <file> <db>

# noms struct new --name Song Album 'G-Sides' Genre 'Electrronica/...' Duration 210 Title '19-2000' Blob @<ds>.value
# noms struct new --name Song ~/mydb Album 'G-Sides' Genre 'Electronica/Dance' Duration 210 Title '19-2000 (Soulchild Remix)' Blob @mp3.value
#
# nomw show <>
#
# noms struct set <mydb> <hash> Blob @ds.value
#
# noms set new ~/mydb @#ibikfkg09vps4pk101cg80suj5bg037p
#
# noms commit '#iljggv6mt55tbl9qt6canr66q17m5gh0' ~/mydb::my-mp3s
# New head #478didbggbpn5gnnscpp1prldqpck3m7
